import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.File;
import java.io.StringReader;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.util.LineReader;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.RecordReader;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.apache.hadoop.mapreduce.lib.input.LineRecordReader;

public class PatternRecordReader
extends RecordReader<LongWritable, Mail> {
	
    private final static Text EOL = new Text("\n");
    private Pattern delimiterPattern;
    private String delimiterRegex;
    private int maxLengthRecord;
    
    private long start;
    private long pos;
    private long end;
    private LineReader in;
    private LineReader inAux;
    private int maxLineLength;
    private boolean skipFirstMail = false; //Flag usada para ignorar primeiro mail de um bloco
    private LongWritable key = new LongWritable();
    private Text text_value = new Text();
    Mail value;
    
    //private LineRecordReader lineRecordReader = new LineRecordReader();
 
    private static final Log LOG = LogFactory.getLog(
    		PatternRecordReader.class);
 
    @Override
    public void initialize(InputSplit genericSplit,
                        TaskAttemptContext context)
            throws IOException, InterruptedException {
 
        Configuration job = context.getConfiguration();
        this.delimiterRegex = job.get("record.delimiter.regex");
        this.maxLengthRecord = job.getInt(
                                "mapred.linerecordreader.maxlength",
                Integer.MAX_VALUE);
        maxLineLength = job.getInt(
        		"mapred.linerecordreader.maxlength",
                Integer.MAX_VALUE);
 
        delimiterPattern = Pattern.compile(delimiterRegex);
 
        // This InputSplit is a FileInputSplit
        FileSplit split = (FileSplit) genericSplit;
  
        // Split "S" is responsible for all records
        // starting from "start" and "end" positions
        start = split.getStart();
        end = start + split.getLength();
        
        // Retrieve file containing Split "S"
        final Path file = split.getPath();
        FileSystem fs = file.getFileSystem(job);
        FSDataInputStream fileIn = fs.open(split.getPath());
        FSDataInputStream fileInAux = fs.open(split.getPath());
        
        // If Split "S" starts at byte 0, first line will be processed
        // If Split "S" does not start at byte 0, first line has been already
        // processed by "S-1" and therefore needs to be silently ignored
        boolean skipFirstLine = false;
        skipFirstMail = false;
        if (start != 0) {
            skipFirstLine = true;
            skipFirstMail = true;
            // Set the file pointer at "start - 1" position.
            // This is to make sure we won't miss any line
            // It could happen if "start" is located on a EOL
                        
            //--start;
            start = start - 500;
            fileInAux.seek(start);
        }
 
        inAux = new LineReader(fileInAux, job);
        
        // If first line needs to be skipped, read first line
        // and stores its content to a dummy Text
        if (skipFirstLine) {
            Text dummy = new Text();           
            // TESTE
            int aux = 0, lineSize1 = 0;
            while(aux < 500){
            	lineSize1 = inAux.readLine(dummy);
            	aux = aux + lineSize1;
            }
            
            start = start + (aux-(lineSize1));
            --start;
            
            /*
            // Reset "start" to "start + line offset"
            //start += in.readLine(dummy, 0,
            //        (int) Math.min(
            //                (long) Integer.MAX_VALUE,
            //                end - start));
            */
        }
 
        fileIn.seek(start);
        in = new LineReader(fileIn, job);
        
        
        // Position is the actual start
        this.pos = start;
 
    }
 
    private int readNext(Text text,
    		int maxLineLength,
    		int maxBytesToConsume)
    				throws IOException {

    	int offset = 0;
    	text.clear();
    	Text tmp = new Text();

    	for (int i = 0; i < maxBytesToConsume; i++) {

    		int offsetTmp = in.readLine(
    				tmp,
    				maxLineLength,
    				maxBytesToConsume);
    		offset += offsetTmp;
    		Matcher m = delimiterPattern.matcher(tmp.toString());

    		// End of File
    		if (offsetTmp == 0) {
    			break;
    		}

    		if (m.matches()) {
    			// Record delimiter
    			break;
    		} else {
    			// Append value to record
    			text.append(EOL.getBytes(), 0, EOL.getLength());
    			text.append(tmp.getBytes(), 0, tmp.getLength());
    		}
    	}
    	return offset;
    }
    
    /**
     * From Design Pattern, O'Reilly...
     * Like the corresponding method of the InputFormat class, this reads a
     * single key/ value pair and returns true until the data is consumed.
     */
    @Override
    public boolean nextKeyValue() throws IOException {
    	
        // Current offset is the key
        key.set(pos);
 
        int newSize = 0;
 
        // Make sure we get at least one record that starts in this Split
        while (pos < end) {
 
            // Read first line and store its content to "value"
        	newSize = readNext(text_value, maxLineLength,
        	        Math.max((int) Math.min(
        	                Integer.MAX_VALUE, end - pos),
        	                maxLineLength));
 
            // No byte read, seems that we reached end of Split
            // Break and return false (no key / value)
            if (newSize == 0) {
                break;
            }
 
            // Line is read, new position is set
            pos += newSize;
 
            // Line is lower than Maximum record line size
            // break and return true (found key / value)
            if (newSize < maxLineLength) {
                break;
            }
 
            // Line is too long
            // Try again with position = position + line offset,
            // i.e. ignore line and go to next one
            // TODO: Shouldn't it be LOG.error instead ??
            LOG.info("Skipped line of size " +
                    newSize + " at pos "
                    + (pos - newSize));
        }
 
         
        if (newSize == 0) {        	        	
            // We've reached end of Split
            key = null;
            value = null;
            text_value = null;
            return false;
        } else {
            // Tell Hadoop a new line has been found
            // key / value will be retrieved by
            // getCurrentKey getCurrentValue methods
        	value = toMail(text_value);
        	
        	boolean flag = skipFirstMail;
        	
        	//Tratar caso em que primeiro mail do novo bloco ja foi lido. Verificar flag. Caso seja este caso, gerar email invalido.
        	if(skipFirstMail){
        		value.From = "Invalid";
        		skipFirstMail = false;
        	}
        	
            return true;
        }
    }
 
    /**
     * From Design Pattern, O'Reilly...
     * This methods are used by the framework to give generated key/value pairs
     * to an implementation of Mapper. Be sure to reuse the objects returned by
     * these methods if at all possible!
     */
    @Override
    public LongWritable getCurrentKey() throws IOException,
            InterruptedException {
        return key;
    }
 
    /**
     * From Design Pattern, O'Reilly...
     * This methods are used by the framework to give generated key/value pairs
     * to an implementation of Mapper. Be sure to reuse the objects returned by
     * these methods if at all possible!
     */
    @Override
    public Mail getCurrentValue() throws IOException, InterruptedException {
        return value;
    }
 
    /**
     * From Design Pattern, O'Reilly...
     * Like the corresponding method of the InputFormat class, this is an
     * optional method used by the framework for metrics gathering.
     */
    @Override
    public float getProgress() throws IOException, InterruptedException {
        if (start == end) {
            return 0.0f;
        } else {
            return Math.min(1.0f, (pos - start) / (float) (end - start));
        }
    }
 
    /**
     * From Design Pattern, O'Reilly...
     * This method is used by the framework for cleanup after there are no more
     * key/value pairs to process.
     */
    @Override
    public void close() throws IOException {
        if (in != null) {
            in.close();
        }
        if(inAux != null){
        	inAux.close();
        }
    }
    
	public Mail toMail(Text val) throws IOException{
		
		Mail mail = new Mail();
		BufferedReader reader = new BufferedReader(new StringReader(val.toString()));
		String line, token, allTokens;
		int numLines = 0;
		
		while((line = reader.readLine()) != null){
			StringTokenizer st = new StringTokenizer(line.toString());
			
			numLines++;
			
			if(st.hasMoreTokens()){
				token = st.nextToken();
			}
			else{
				token = "";
			}
			
			allTokens = "";
			while(st.hasMoreTokens()){
				allTokens = allTokens + " " + st.nextToken();
			}
			
			if(token.equals("From:")){
				mail.From = allTokens;
			}
			if(token.equals("Reply-To:")){
				mail.Reply_To = allTokens;
			}
			if(token.equals("X-Mailer:")){
				mail.Mailer = allTokens;
			}
			if(token.equals("Message-ID:")){
				mail.Message_ID = allTokens;
			}
			if(token.equals("Date:")){
				mail.Date = allTokens;
			}
			if(token.equals("Organization:")){
				mail.Organization = allTokens;
			}
			if(token.equals("Mime-Version:")){
				mail.Mime_Version = allTokens;
			}
			if(token.equals("Content-Type:")){
				mail.Content_Type = allTokens;
			}
			if(token.equals("X-Additional-Headers:")){
				mail.Additional_Headers = allTokens;
			}
			if(token.equals("X-Timestamp:")){
				mail.Timestamp = allTokens;
			}
			if(token.equals("Subject:")){
				mail.Subject = allTokens;
			}
			if(token.equals("X-SMTP-Proto:")){
				mail.SMTP_Proto = allTokens;
			}
			if(token.equals("X-Mail-From:")){
				mail.Mail_From = allTokens;
			}
			if(token.equals("X-Rcpt-To:")){
				mail.Rcpt_to.add(allTokens);
			}
			if(token.equals("X-SMTP-Count:")){
				mail.SMTP_Count = Integer.parseInt(allTokens.replace(" ", ""));
			}
			if(token.equals("X-Sensor-Dstport:")){
				mail.Sensor_Dstport = Integer.parseInt(allTokens.replace(" ", ""));
			}
			if(token.equals("X-Sensor-Designation:")){
				mail.Sensor_Designation = allTokens;
			}
			if(token.equals("X-Sensor-CC:")){
				mail.Sensor_CC = allTokens;
			}
			if(token.equals("X-Src-Proto:")){
				mail.Src_Proto = allTokens;
			}
			if(token.equals("X-Src-IP:")){
				mail.Src_IP = allTokens;
			}
			if(token.equals("X-Src-Hostname:")){
				mail.Src_Hostname = allTokens;
			}
			if(token.equals("X-Src-ASN:")){
				mail.Src_ASN = allTokens;
			}
			if(token.equals("X-Src-OS:")){
				mail.Src_OS = allTokens;
			}
			if(token.equals("X-Src-RIR:")){
				mail.Src_RIR = allTokens;
			}
			if(token.equals("X-Src-CC:")){
				mail.Src_CC = allTokens;
			}
			if(token.equals("X-Src-Dnsbl:")){
				mail.Src_Dnsbl = allTokens;
			}
			if(token.equals("X-Src-Srcport:")){
				mail.Src_Srcport = Integer.parseInt(allTokens.replace(" ", ""));
			}
			if(token.equals("X-Src-Prefix:")){
				mail.Src_Prefix = allTokens;
			}
			if(token.equals("X-Dst-IP:")){
				mail.Dst_IP = allTokens;
			}
			if(token.equals("X-Dst-Hostname:")){
				mail.Dst_Hostname = allTokens;
			}
			if(token.equals("X-Dst-ASN:")){
				mail.Dst_ASN = allTokens;
			}
			if(token.equals("X-Dst-Dstport:")){
				mail.Dst_Dstport = allTokens;
			}
			if(token.equals("X-Dst-RIR:")){
				mail.Dst_RIR = allTokens;
			}
			if(token.equals("X-Dst-CC:")){
				mail.Dst_CC = allTokens;
			}
			if(token.equals("X-Dst-Dnsbl:")){
				mail.Dst_Dnsbl = allTokens;
			}
			if(token.equals("X-Dst-Prefix:")){
				mail.Dst_Prefix = allTokens;
			}
			//TODO: CONTENT
			if(token.equals("CONTENT")){
				mail.Content = allTokens;
			}
		}
		
		if(numLines == 0){
			mail.From = "Invalid"; 
		}
		
		//System.out.println("Mail - " + mail.From);
		
		return mail;
	}
 
}
